name: Publish

env:
  NUGET_OUTPUT: ./Artifacts/NuGet
  DOTNET_VERSION: '6.0.400'
  DOTNET_X64_CACHE: 'dotnet-x64-cache-${{ github.sha }}'
  DOTNET_ARM64_CACHE: 'dotnet-arm64-cache-${{ github.sha }}'

on:
  pull_request:
    types: [closed]

jobs:
  dotnet-x64:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .Net
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - uses: actions/cache@v3
        id: dotnet-x64-output
        with:
          path: ./Source/out/x64
          key: ${{ env.DOTNET_X64_CACHE }}

      - name: Build x64 - self contained, ready to run
        working-directory: ./Source
        run: dotnet publish -c Release -r linux-x64 -p:PublishReadyToRun=true --self-contained -o out/x64

  dotnet-arm64:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .Net
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - uses: actions/cache@v3
        id: dotnet-arm64-output
        with:
          path: ./Source/out/arm64
          key: ${{ env.DOTNET_ARM64_CACHE }}

      - name: Build arm64 - self contained, ready to run
        working-directory: ./Source
        run: dotnet publish -c Release -r linux-arm64 -p:PublishReadyToRun=true --self-contained -o out/arm64
  release:
    runs-on: ubuntu-latest
    needs: [dotnet-x64, dotnet-arm64]
    outputs:
      version: ${{ steps.release.outputs.version }}
      publish: ${{ steps.release.outputs.should-publish }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Release
        id: release
        uses: aksio-insurtech/release-action@v1
        with:
          user-name: 'Aksio Build'
          user-email: 'build@aksio.no'

  publish-docker-production:
    if: needs.release.outputs.publish == 'true'
    runs-on: ubuntu-latest
    needs: [release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: dotnet-x64-output
        with:
          path: ./Source/out/x64
          key: ${{ env.DOTNET_X64_CACHE }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Production Docker Image
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Docker/Production/Dockerfile
          push: true
          tags: |
            aksioinsurtech/ingressmiddleware:${{ needs.release.outputs.version }}
            aksioinsurtech/ingressmiddleware:latest
          build-args: |
            VERSION=${{ needs.release.outputs.version }}

  publish-docker-development:
    if: needs.release.outputs.publish == 'true'
    runs-on: ubuntu-latest
    needs: [release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: dotnet-x64-output
        with:
          path: ./Source/out/x64
          key: ${{ env.DOTNET_X64_CACHE }}

      - uses: actions/cache@v3
        id: dotnet-arm64-output
        with:
          path: ./Source/out/arm64
          key: ${{ env.DOTNET_ARM64_CACHE }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Development Docker Image
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Docker/Development/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            aksioinsurtech/ingressmiddleware:${{ needs.release.outputs.version }}-development
            aksioinsurtech/ingressmiddleware:latest-development
          build-args: |
            VERSION=${{ needs.release.outputs.version }}
